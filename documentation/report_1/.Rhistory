origin)
}
#melt data frame now that we have added a column for each band
#this will fit ggplot2 expectations and make it much easier
df.melt <- melt(df[,c(1:2,4:9)],id.vars=1:2)
#name the columns for reference
#try to be generic
colnames(df.melt) <- c("date","grouping","band","value")
#use ggplot to produce an area plot
p <- ggplot(data=df.melt) +
geom_area(aes(x = date, y = value, fill=band),
#alpha=0.25,
position="identity") +  #this means not stacked
scale_fill_manual(values=c("ypos1"=col.brew[7],  #assign the colors to each of the bands; colors get darker as values increase
"ypos2"=col.brew[8],
"ypos3"=col.brew[9],
"yneg1"=col.brew[4],
"yneg2"=col.brew[3],
"yneg3"=col.brew[2])) +
ylim(origin,horizonscale) +   #limit plot to origin and horizonscale
facet_grid(grouping ~ .) +    #do new subplot for each group
theme_bw() +                  #this is optional, but I prefer to default
opts(legend.position = "none",    #remove legend
strip.text.y = theme_text(),#rotate strip text to horizontal
axis.text.y = theme_blank(),#remove y axis labels
axis.ticks = theme_blank(), #remove tick marks
axis.title.y = theme_blank(),#remove title for the y axis
axis.title.x = theme_blank(),#remove title for the x axis
title = title,               #add a title from function parameter
plot.title = theme_text(size=16, face="bold", hjust=0)) #format title
return(p)
}
horizon.panel.ggplot(roc.melt, "EDHEC Indexes Return (Rolling 1 Year)")
citations
?citations
jaslkdfj
adslfjkasdf
asldkfjalksdjflajsdlkjfalsjdfklasjdf
asldkjflaksjdlfkjalsdjflasjdklfjlkasjdflkjaslkdfjlkasjdf
asjdflkajsldkfjlaksdjflkajsdlkfajskldjfalksjdsaljfljkadslfjasjflkaskjfjakskjfakjfkjaskjldfkjlalsdkjf
asdjflkalkjdsflkasdlkjflaksjdfkjalskjdflkajsdlkfjlkajsdlkjflkasdkljfkjlalksdjflaksjdflkajsdflakjsdflkasjdlfkajdsfl;kjasdl;fkjasl;dkfjals;kdjfal;sdkjfa;lskdjf;alskdjfa;lskdjf
dta <- read.csv("~/Documents/PSU applied statistics/ESM 566/Brian.csv")
View(dta)
save.image("~/Documents/PSU applied statistics/ESM 566/ESM_566_WS1.RData")
?pf
?c
cement_data <- data.frame(technique=c(1,2,3,4)
tensile_strength_run1=c(3129,3000,2865,2890)
cement_data <- data.frame(technique=c(1,2,3,4),
tensile_strength_run1=c(3129,3000,2865,2890),
tensile_strength_run2=c(3200,3300,2975,3150),
tensile_strength_run3=c(2600,2700,2600,2765))
View(cement_data)
?lm
?var.test
?deviance
a = 4
n = 4
N = n*a
f <- ((SS_treatments / (a-1)) / (SS_e / (N-a)))
?aov
?lm
?aov
cement_data <- data.frame(technique=c(1,2,3,4),
tensile_strength_run1=c(3129,3000,2865,2890),
tensile_strength_run2=c(3200,3300,2975,3150),
tensile_strength_run3=c(2600,2700,2600,2765))
summary(cement_data)
?aov
?anova
cement_data <- data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
cement_data <- data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
model <- lm(tensile_strength ~ technique, data = cement_data)
View(model)
anova(model)
anova(model)
?lm
?factor
model <- lm(tensile_strength ~ factor(technique), data = cement_data)
cement_data <- data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
model <- lm(tensile_strength ~ factor(technique), data = cement_data)
model <- lm(tensile_strength ~ factor(technique), data = cement_data)
anova(model)
factor(cement_data$technique)
model <- lm(tensile_strength ~ technique, data = cement_data)
anova(model)
# 3.7
cement_data = data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
model = lm(tensile_strength ~ factor(technique), data = cement_data)
model = lm(tensile_strength ~ technique, data = cement_data)
anova(model)
# 3.7
cement_data = data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
model = lm(tensile_strength ~ factor(technique), data = cement_data)
anova(model)
# 3.12
drug_data = data.frame(dosage=c(20,30,40),
bioactivity=c(24,28,37,30,
37,44,31,35,
42,47,52,38))
View(drug_data)
# 3.12
drug_data = data.frame(dosage=c(20,20,20,20,30,30,30,30,40,40,40,40),
bioactivity=c(24,28,37,30,
37,44,31,35,
42,47,52,38))
drug_model = lm(bioactivity ~ dosage, data = drug_data)
anova(drug_model)
drug_model = lm(bioactivity ~ factor(dosage), data = drug_data)
anova(drug_model)
factor(drug_data$dosage)
?factor
# 3.7
cement_data = data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
cement_model = lm(tensile_strength ~ factor(technique), data = cement_data)
anova(cement_model)
bioactivity ~ factor(drug_data$dosage)
# 3.7
cement_data = data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
cement_model = lm(tensile_strength ~ factor(technique), data = cement_data)
anova(cement_model)
# 3.12
drug_data = data.frame(dosage=c(20,20,20,20,30,30,30,30,40,40,40,40),
bioactivity=c(24,28,37,30,
37,44,31,35,
42,47,52,38))
drug_model = lm(bioactivity ~ factor(dosage), data = drug_data)
anova(drug_model)
# 3.7
cement_data = data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
cement_model = lm(tensile_strength ~ technique, data = cement_data)
anova(cement_model)
cement_model = lm(tensile_strength ~ factor(technique), data = cement_data)
anova(cement_model)
# 3.7
cement_data = data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
cement_model = lm(tensile_strength ~ factor(technique), data = cement_data)
anova(cement_model)
# 3.12
drug_data = data.frame(dosage=c(20,20,20,20,30,30,30,30,40,40,40,40),
bioactivity=c(24,28,37,30,
37,44,31,35,
42,47,52,38))
drug_model = lm(bioactivity ~ factor(dosage), data = drug_data)
anova(drug_model)
cement_data = data.frame(technique=c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4),
tensile_strength=c(3129,3000,2865,2890,
3200,3300,2975,3150,
2800,2900,2985,3050,
2600,2700,2600,2765))
?t
?dt
?LSD.test
?cor
?ols
?ls
?lm
?attach
?c
?which
?data.frame
?data
?ddply
library(plyr)
import(plyr)
?function
install.packages("plyr")
library(plyr)
?ddply
??ddply
?ddply
install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
help(httr)
r = GET('https://api.eia.gov/v2/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
r
rawToChar(r$content)
View(r)
data = fromJSON(rawToChar(r$content))
View(data)
rawToChar(res$content)
data
r_elec = GET('https://api.eia.gov/v2/electricity/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
data_elec = fromJSON(rawToChar(r_elec$content))
View(data_elec)
install.packages("Crossover")
library(Crossover)
install.packages("JavaGD")
library(Crossover)
library(JavaGD)
library(JavaGD)
View(data)
install.packages(c("httr", "jsonlite"))
library(httr)
library(httr)
library(jsonlite)
r = GET('https://api.eia.gov/v2/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
data = fromJSON(rawToChar(r$content))
View(data)
r_elec = GET('https://api.eia.gov/v2/electricity/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
data_elec = fromJSON(rawToChar(r_elec$content))
View(data_elec)
View(r_elec)
typeof(data_elec)
electricity = fromJSON(rawToChar(r_elec$content))
electricity
View(electricity)
electricity$response$routes
elec = fromJSON(rawToChar(r_elec$content))
elec_routes = elec$response$routes
elec_routes
elec_routes$id
library(httr)
library(jsonlite)
r = GET('https://api.eia.gov/v2/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
data = fromJSON(rawToChar(r$content))
r = GET('https://api.eia.gov/v2/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
top = fromJSON(rawToChar(r$content))
r_elec = GET('https://api.eia.gov/v2/electricity/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
elec = fromJSON(rawToChar(r_elec$content))
elec_routes = elec$response$routes
View(top)
View(elec_routes)
View(elec)
View(elec_routes)
r_elec = GET('https://api.eia.gov/v2/electricity/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
elec = fromJSON(rawToChar(r_elec$content))
elec$response$id
View(elec)
elec$response$routes$id
r_state = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_profiles = fromJSON(rawToChar(r_state$content))
View(state_profiles)
state_profiles$response$routes
state_profiles$response$routes$id
r_state = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/data/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_profiles = fromJSON(rawToChar(r_state$content))
View(state_profiles)
state_profiles = fromJSON(rawToChar(r_state$content))
r_state = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_profiles = fromJSON(rawToChar(r_state$content))
View(state_profiles)
state_profiles$response$routes$id
r_state_emissions = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_emissions = fromJSON(rawToChar(r_state_emissions$content))
View(state_emissions)
r_state_emissions = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_emissions = fromJSON(rawToChar(r_state_emissions$content))
View(state_emissions)
state_emissions$response$data
state_emissions_data = data.frame(state_emissions$response$data)
View(state_emissions_data)
dim(state_emissions_data)
library(httr)
library(jsonlite)
r = GET('https://api.eia.gov/v2/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
top = fromJSON(rawToChar(r$content))
r_elec = GET('https://api.eia.gov/v2/electricity/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
elec = fromJSON(rawToChar(r_elec$content))
r_state = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_profiles = fromJSON(rawToChar(r_state$content))
r_state_emissions = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_emissions = fromJSON(rawToChar(r_state_emissions$content))
View(state_emissions)
r_state_emissions = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_emissions = fromJSON(rawToChar(r_state_emissions$content))
View(state_emissions)
state_emissions_by_fuel = fromJSON(rawToChar(r_state_emissions$content))
state_emissions_by_fuel$response$id
state_emissions_by_fuel$response$id
state_emissions_by_fuel$response$data
r_state_emissions = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data?data[]=co2-rate-lbs-mwh/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
co2_rate_per_mwh = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data?data[]=co2-rate-lbs-mwh/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
r_co2_rate_per_mwh = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data?data[]=co2-rate-lbs-mwh/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
co2_rate_per_mwh = fromJSON(rawToChar(r_co2_rate_per_mwh$content))
View(co2_rate_per_mwh)
r_co2_rate_per_mwh = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data/?data[]=co2-rate-lbs-mwh/&api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
co2_rate_per_mwh = fromJSON(rawToChar(r_co2_rate_per_mwh$content))
View(co2_rate_per_mwh)
co2_rate_per_mwh$error
r_co2_rate_per_mwh = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data/?data[]=co2-rate-lbs-mwh&api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
co2_rate_per_mwh = fromJSON(rawToChar(r_co2_rate_per_mwh$content))
View(co2_rate_per_mwh)
co2_rate_per_mwh_data = co2_rate_per_mwh$response$data
View(co2_rate_per_mwh_data)
r_eia_api_v2 = GET('https://api.eia.gov/v2/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
eia_api_v2 = fromJSON(rawToChar(r$content))
View(eia_api_v2)
state_emissions_by_fuel$response$data
View(state_profiles)
View(state_emissions_by_fuel)
View(state_emissions)
library(httr)
library(jsonlite)
# top level eia api response with routes
r_eia_api_v2 = GET('https://api.eia.gov/v2/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
eia_api_v2 = fromJSON(rawToChar(r$content))
elec = fromJSON(rawToChar(r_elec$content))
# state electricity profiles
r_state = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_profiles = fromJSON(rawToChar(r_state$content))
# emissions by state by fuel
r_state_emissions = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/?api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
state_emissions_by_fuel = fromJSON(rawToChar(r_state_emissions$content))
state_emissions_by_fuel$response$data
# making a data frame out of emissions by state by fuel
r_co2_rate_per_mwh = GET('https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data/?data[]=co2-rate-lbs-mwh&api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')
co2_rate_per_mwh = fromJSON(rawToChar(r_co2_rate_per_mwh$content))
co2_rate_per_mwh_data = co2_rate_per_mwh$response$data
View(state_emissions_by_fuel)
View(state_profiles)
co2 = 'https://api.eia.gov/v2/electricity/state-electricity-profiles/emissions-by-state-by-fuel/data/?data[]=co2-rate-lbs-mwh&data[]=co2-thousand-metric-tons&api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn'
r_co2 = GET(co2)
install(lme4)
install.packages(lme4)
install.packages("lme4")
library(lme4)
?lmer
# install.packages("devtools")
devtools::install_github("jameelalsalam/eia2")
install.packages("devtools")
?devtools
??devtools
devtools::install_github("jameelalsalam/eia2")
usethis::edit_r_environ("user")
EIA_KEY=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn
EIA_KEY= 'Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn'
Sys.getenv("EIA_KEY")
library(httr)
library(jsonlite)
install.packages(c("tidyverse", "httr", "jsonlite", "nycflights13", "gapminder", "Lahman"))
?dut
?dput
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
?filter
ggplot2::mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
?geom_point
?aes
?plot
plot(mpg$displ, mpg$hwy)
ggplot(data = mpg)
mg
mog
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = class, y = drv))
library(httr)
library(jsonlite)
orwa_sales2022_response = fromJSON(rawToChar(GET('https://api.eia.gov/v2/electricity/retail-sales/data/?frequency=monthly&data[0]=customers&data[1]=price&data[2]=revenue&data[3]=sales&facets[stateid][]=OR&facets[stateid][]=WA&start=2022-01&end=2022-12&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')$content))
orwa_sales2022 = data.frame(orwa_sales2022_response$response$data)
View(orwa_sales2022)
orwa_sales2022_raw = fromJSON(rawToChar(GET('https://api.eia.gov/v2/electricity/retail-sales/data/?frequency=monthly&data[0]=customers&data[1]=price&data[2]=revenue&data[3]=sales&facets[stateid][]=OR&facets[stateid][]=WA&start=2022-01&end=2022-12&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')$content))
orwa_sales2022 = data.frame(orwa_sales2022_response$response$data)
orwa_sales2022 = data.frame(orwa_sales2022_raw$response$data)
View(orwa_sales2022)
ggplot(data = orwa_sales2022)
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(sales, revenue))
# you can add more variables by mapping them to an aesthetic
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(sales, revenue, color = sector))
View(orwa_sales2022)
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(sales, revenue, color = sectorName))
# you can add more variables by mapping them to an aesthetic
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
mpg = data.frame(mpg)
View(mpg)
# you can add more variables by mapping them to an aesthetic
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
# you can add more variables by mapping them to an aesthetic
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(sales, revenue, size = customers))
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(sales, revenue, color = sectorName, size = customers))
# explaining the parts of a ggplot() call:
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
?geom_point
# you can "facet" (subset) plots with facet_wrap() and facet_grid()
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(drv ~ cyl, nrow = 2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(drv ~ cyl)
# you can "facet" (subset) plots with facet_wrap() and facet_grid()
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(sales, revenue)) # line goes up!!
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(x = sales, y = revenue)) # line goes up!!
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(x = sales, y = revenue, color = sectorName, size = customers)) # ugly
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(x = sales, y = revenue, color = sectorName)) # ugly
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(x = period, y = sales))
ggplot(data = orwa_sales2022) + geom_point(mapping = aes(x = period, y = sales, color = sectorName))
library(httr)
library(jsonlite)
orwa_sales_raw = fromJSON(rawToChar(GET('https://api.eia.gov/v2/electricity/retail-sales/data/?frequency=monthly&data[0]=customers&data[1]=price&data[2]=revenue&data[3]=sales&facets[stateid][]=OR&facets[stateid][]=WA&start=2020-01&end=2022-12&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Mli1qH27tE9etbjMLrvgZugccBG0gcBwoLbPcZQn')$content))
orwa_sales = data.frame(orwa_sales_raw$response$data)
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = sales, y = revenue)) # line goes up!!
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = sales, y = revenue, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = sales)) + facet_wrap(~ sectorName)
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = sales, color = stateid)) + facet_wrap(~ sectorName)
# you can "facet" (subset) plots with facet_wrap() and facet_grid()
# facet_wrap facets on levels of one variable
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ cty, nrow = 2)
?mpg
# facet_grid facets on levels of two variables
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(drv ~ cyl)
# you can "facet" (subset) plots with facet_wrap() and facet_grid()
# facet_wrap facets on levels of one variable
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)
# facet_grid facets on levels of two variables
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(drv ~ cyl)
# facet_grid facets on levels of two variables
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .)
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = sales, y = revenue)) # line goes up!!
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = sales, y = revenue, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = price))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = price, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = price, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = price, y = sales)) + facet_wrap(~ sectorName)
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = price, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = price, color = sectorName)) + facet_grid(stateid ~ sectorName)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = price, color = sectorName)) + facet_grid(stateid ~ sectorName)
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = sales, color = stateid)) + facet_wrap(~ sectorName)
ggplot(data = orwa_sales) + geom_smooth(mapping = aes(x = period, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_smooth(mapping = aes(x = period, y = sales, color = sectorName, linetype = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_smooth(mapping = aes(x = period, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_smooth(mapping = aes(x = period, y = sales, color = sectorName, group = sectorName))
ggplot(data = orwa_sales) + geom_smooth(mapping = aes(x = period, y = sales, color = sectorName, group = sectorName))
ggplot(data = orwa_sales) + geom_smooth(mapping = aes(x = period, y = sales, color = sectorName, group = sectorName)) + geom_point(mapping = aes(x = period, y = sales))
ggplot(data = orwa_sales) + geom_smooth(mapping = aes(x = period, y = sales, color = sectorName, group = sectorName)) + geom_point(mapping = aes(x = period, y = sales, color = sectorName))
ggplot(data = orwa_sales) + geom_point(mapping = aes(x = period, y = price, color = sectorName)) + facet_grid(stateid ~ sectorName)
# you can put global mappings in the ggplot() call and then add geoms that will apply to all of them
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth()
View(orwa_sales)
View(orwa_sales_raw)
install.packages("tidyverse")
install.packages("palmerpenguins")
install.packages("tlmgr")
install.packages("tidyverse")
install.packages("palmerpenguins")
tinytex::pdflatex('stat570_report_1_data_whisperers.tex')
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
-all
--all
y
tinytex::tlmgr_update()
tinytex::pdflatex('stat570_report_1_data_whisperers.tex')
options(tinytex.verbose = TRUE)
tinytex::pdflatex('stat570_report_1_data_whisperers.tex')
?tlmgr_install()
tlmgr_install
?tlmgr_install
??tlmgr_install
?tinytex::tlmgr_update
?tinytex::tlmgr_install
?tinytex::tlmgr_search('titling.sty')
tinytex::tlmgr_search('titling.sty')
tinytex::tlmgr_install(pkgs = 'titling')
tinytex::tlmgr_install(pkgs = 'lwarp')
tinytex::parse_install()
?tinytex::parse_install()
?tinytex::parse_install('stat570_report_1_data_whisperers.log')
?tinytex::parse_install(log = 'stat570_report_1_data_whisperers.log')
tinytex::parse_install(log = 'stat570_report_1_data_whisperers.log')
setwd(dir = '~/Documents/psu/STAT 570/stat_consulting_preschoolers/documentation/')
tinytex::parse_install(log = 'stat570_report_1_data_whisperers.log')
setwd(dir = '~/Documents/psu/STAT 570/stat_consulting_preschoolers/documentation/report_1/')
tinytex::parse_install(log = 'stat570_report_1_data_whisperers.log')
